name: JobPortal CI/CD

# Run CI on PRs and pushes to any branch; run CD only on pushes to main
on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

permissions:
  contents: read
  packages: write
  id-token: write

env:
  BACKEND_PATH: Backend/JobPortal/JobPortal.API
  FRONTEND_PATH: Frontend/jobportal-frontend
  BACKEND_IMAGE_NAME: jobportal-backend
  FRONTEND_IMAGE_NAME: jobportal-frontend
  REGISTRY: ghcr.io
  # image tag pattern (commit SHA)
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-test:
    name: Build & Test (CI)
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.push-backend.outputs.image }}
      frontend-image: ${{ steps.push-frontend.outputs.image }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ hashFiles('**/*.csproj') }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore & build backend
        working-directory: ${{ env.BACKEND_PATH }}
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Run backend tests
        working-directory: ${{ env.BACKEND_PATH }}
        run: |
          dotnet test --no-build --verbosity normal

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ${{ env.FRONTEND_PATH }}/node_modules
          key: node-${{ hashFiles('**/package-lock.json') }}

      - name: Install frontend dependencies
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm ci

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm run build

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push backend image
        id: push-backend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.BACKEND_PATH }}/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }},${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build & push frontend image
        id: push-frontend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.FRONTEND_PATH }}/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }},${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to remote (only main)
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for images to be available on GHCR
        run: |
          echo "Images pushed: backend=${{ needs.build-and-test.outputs.backend-image }} frontend=${{ needs.build-and-test.outputs.frontend-image }}"

      # SSH deploy step uses the server to docker-login to GHCR and pull images then docker-compose up -d
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_SSH_PORT || '22' }}
          envs: |
            GHCR_USER=${{ github.actor }}
            GHCR_TOKEN=${{ secrets.GHCR_TOKEN }}
            REPO_OWNER=${{ github.repository_owner }}
            BACKEND_IMG=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            FRONTEND_IMG=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          script: |
            set -e
            echo "Logging in to GHCR on remote..."
            echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            cd ${{ secrets.DEPLOY_PATH }}
            echo "Pulling backend image $BACKEND_IMG"
            docker pull $BACKEND_IMG
            echo "Pulling frontend image $FRONTEND_IMG"
            docker pull $FRONTEND_IMG
            # Option A: update images in docker-compose.yml (replace tags) then docker-compose up -d
            # If you keep docker-compose.yml using `image: ghcr.io/owner/name:latest`, you can simply pull latest and restart:
            docker-compose up -d
            # Optional: cleanup dangling images
            docker image prune -f
